<!DOCTYPE html>
<html>

<head></head>

<body>SCORE:
<input id="lblScore" type="text"/>
<br/>
TIME:
<input id="lblTime" type="text"/>
<br/>
<canvas id="canvas" height="600" width="600"></canvas>


<script type="text/javascript">

    var context = canvas.getContext("2d");
    var shape = new Object();
    var board;
    var score;
    var pac_color;
    var start_time;
    var time_elapsed;
    var interval;
    var from_big_circle;//The start of the pacman circle
    var to_big_circle;//The end of the pacman circle
    var eye_center_x;//The x location of the pacman's eye relative to the pacman's center
    var eye_center_y;//The y location of the pacman's eye relative to the pacman's center
    var init;//True iff the pacman hasn't been drawn yet
    var previous_kind_fifty_pointer;//The kind of object the fifty pointer was at before
    var fifty_pointer_loc = new Object();//The location of the fifty pointer
    var fifty_pointer_is_alive;//True iff the fifty pointer is in the game
    var num_of_rows;//The number of rows in the board
    var num_of_cols;//The number of columns in the board
    var song_src;//The src of the background song
    var time_limit = 2;//The time limit of the game
    //Default values for arrows
    var up_key = 'ArrowUp';
    var down_key='ArrowDown';
    var left_key='ArrowLeft';
    var right_key='ArrowRight';
    var interval_time = 100;//The frequency of the intervals
    Start();

    function Start() {
        board = new Array();
        score = 0;
        fifty_pointer_is_alive = true;
        init = true;
        previous_kind_fifty_pointer = 0;
        pac_color = "yellow";
        song_src = "PacMan.mp3";

        
        var food_remain = 50;
        var point25 = food_remain*0.1;
        var point15 = food_remain*0.3;
        var point5 = food_remain - point25 -point15;
        
        
        var pacman_remain = 1;
        start_time = new Date();
        num_of_rows = 10;
        num_of_cols =10;
        var cnt = num_of_cols*num_of_rows;
        var fifty_pointer_loc_x = Math.floor(Math.random()*num_of_rows);
        var fifty_pointer_loc_y = Math.floor(Math.random()*num_of_cols);
        var num_of_walls = 5;
        cnt = cnt - num_of_walls;
    
        
        for (var i = 0; i < num_of_rows; i++) {
            board[i] = new Array();
            //put obstacles in (i=3,j=3) and (i=3,j=4) and (i=3,j=5), (i=6,j=1) and (i=6,j=2)
            for (var j = 0; j < num_of_cols; j++) {
                if(i==fifty_pointer_loc_x && j==fifty_pointer_loc_y)
                {
                    board[i][j] = 3;
                    fifty_pointer_loc.i = i;
                    fifty_pointer_loc.j = j ;
                }
                else
                {
                    if ((i === 3 && j === 3) || (i === 3 && j === 4) || (i === 3 && j === 5) || (i === 6 && j === 1) || (i === 6 && j === 2)) {
                        board[i][j] = 4;
                    
                    } 
                    else {
                        var randomNum = Math.random();
                        if (randomNum <= 1.0 * food_remain / cnt) {
                            food_remain--;
                            board[i][j] = 1;
                        } else if (randomNum < 1.0 * (pacman_remain + food_remain) / cnt) {
                            shape.i = i;
                            shape.j = j;
                            pacman_remain--;
                            board[i][j] = 2;
                        } else if  (randomNum < 1.0 * (pacman_remain + food_remain+num_of_walls) / cnt) {
                            board[i][j] = 0;
                        }
                        cnt--;
                    }
                }
            }
        }

        //Starting song
        var song = new setBackgroundSong(song_src);
        //song.start();

        while (food_remain > 0) {
            var emptyCell = findRandomEmptyCell(board);
            board[emptyCell[0]][emptyCell[1]] = 1;
            food_remain--;
        }
        keysDown = {};
        addEventListener("keydown", function (e) {
            keysDown[e.code] = true;
        }, false);
        addEventListener("keyup", function (e) {
            keysDown[e.code] = false;
        }, false);
        interval = setInterval(UpdatePosition, interval_time);
    }


    
    function setBackgroundSong(source)
{
    this.source = source;
    var son;
    this.son = son;
    this.start = function()
    {
        
        this.son = document.createElement("embed");
        this.son.setAttribute("src", this.source);
        this.son.setAttribute("hidden", "true");
        this.son.setAttribute("autostart", "true");
        document.body.appendChild(this.son);
    }
        
    }
    function findRandomEmptyCell(board) {
        var i = Math.floor((Math.random() * 9) + 1);
        var j = Math.floor((Math.random() * 9) + 1);
        while (board[i][j] !== 0) {
            i = Math.floor((Math.random() * 9) + 1);
            j = Math.floor((Math.random() * 9) + 1);
        }
        return [i, j];
    }

    /**
     * @return {number}
     */
    function GetKeyPressed() {
        if (keysDown[up_key]) {
            return 1;
        }
        if (keysDown[down_key]) {
            return 2;
        }
        if (keysDown[left_key]) {
            return 3;
        }
        if (keysDown[right_key]) {
            return 4;
        }
    }

    //TYhis function will get the direction that the pacman is facing and will set the parameters of the packman so
    //that once drawn, the pacman will look at the given direction.
    function SetPackManParam(key_pressed)
    {
        //Down
        if(key_pressed==2)
        {
            
            from_big_circle= 0.65 * Math.PI;
            to_big_circle = 0.35 * Math.PI;
            eye_center_y = 5;
            eye_center_x= 15;
            pac_color = "red";
        }
        else
        {

            //Left      
            if(key_pressed==3)
            {
                from_big_circle= 1.15 * Math.PI;
                to_big_circle = 0.85 * Math.PI;
                eye_center_x = -5;
                eye_center_y = -15;
                pac_color = "green";
            }
            else
            {
                //Up
                if(key_pressed==1)
                {
                    from_big_circle= 1.65 * Math.PI;
                    to_big_circle = 1.35 * Math.PI;
                    eye_center_y = -5;
                    eye_center_x = -15;
                    pac_color = "blue";
                }
                else
                {
                    //Right
                    if(key_pressed==4)
                    {
                        from_big_circle= 0.15 * Math.PI;
                        to_big_circle = 1.85 * Math.PI;
                        eye_center_x = 5;
                        eye_center_y=-15;
                        pac_color = "pink";
                    }
                }
            }
        }

                    
    }
    function DrawFiftyPointer(center)
    {
        var inside_color = "yellow";
        var level_one_color = "red";
        var level_two_color = "blue";
        var level_three_color = "black";
        var level_four_color = "grey";

        //Creating the outer circle
        context.beginPath();
        context.arc(center.x, center.y, 30,0, 2 * Math.PI);
        context.fillStyle = level_four_color;
        context.fill();

        //Creting the level three circle
        context.beginPath();
        context.arc(center.x, center.y, 24,0, 2 * Math.PI);
        context.fillStyle = level_three_color;
        context.fill();

        //Creting the level two circle
        context.beginPath();
        context.arc(center.x, center.y, 18,0, 2 * Math.PI);
        context.fillStyle = level_two_color;
        context.fill();

        //Creting the level one circle
        context.beginPath();
        context.arc(center.x, center.y, 12,0, 2 * Math.PI);
        context.fillStyle = level_one_color;
        context.fill();
        
        //Creting the inside circle
        context.beginPath();
        context.arc(center.x, center.y, 6,0, 2 * Math.PI);
        context.fillStyle = inside_color;
        context.fill();
    }
    //This function recieves the center of the pacman and will draw it
    function DrawPacman(center)
    {
        var key_pressed = GetKeyPressed();
        if(init == true)
        {
            key_pressed = 4;
            init = false;
        }
        SetPackManParam(key_pressed)
        context.beginPath();
        context.arc(center.x, center.y, 30, from_big_circle, to_big_circle); // half circle
        context.lineTo(center.x, center.y);
        context.fillStyle = pac_color; //color
        context.fill();
        context.beginPath();
        context.arc(center.x + eye_center_x, center.y + eye_center_y, 5, 0, 2 * Math.PI); // circle
        context.fillStyle = "black"; //color
        context.fill();
    }
    //This function recieves the center of the one pointer and will draw it
    function DrawOnePointer(center)
    {
        context.beginPath();
        context.arc(center.x, center.y, 15, 0, 2 * Math.PI); // circle
        context.fillStyle = "black"; //color
        context.fill();
    }

    //This function recieves the center of a wall and will draw it
    function DrawWall(center)
    {
        context.beginPath();
        context.rect(center.x - 30, center.y - 30, 60, 60);
        context.fillStyle = "grey"; //color
        context.fill();
    }
    function Draw() {
       
        context.clearRect(0, 0, canvas.width, canvas.height); //clean board
        lblScore.value = score;
        if(time_limit - time_elapsed > interval_time/1000)
            lblTime.value = time_limit - time_elapsed;
        else
            lblTime.value=0;
        for (var i = 0; i < 10; i++) {
            for (var j = 0; j < 10; j++) {
                var center = new Object();
                center.x = i * 60 + 30;
                center.y = j * 60 + 30;
                
                //Drawing packman
                if (board[i][j] === 2) {
                    DrawPacman(center);
                } else if (board[i][j] === 1) {//Drawing one pointers
                  DrawOnePointer(center);
                  
                } else if (board[i][j] === 4) {//Drawing walls
                    DrawWall(center);
                }
                else if (board[i][j] === 3) {//Drawing fifty pointer
                    DrawFiftyPointer(center);
                }
            }
        }


    }
    //This function will get the kind of a certain position (one pointer/monster/fifty pointer and so on..) and will return the score that the pacman recives
    function GetScore(kind)
    {
        //Nothing
        if(kind==0)
            return 0;
        //One pointer
        if(kind == 1)
        {
            return 1;
        }
        //Fifty pointer
        if(kind == 3)
        {
            return 50;
        }

    }
    function UpdatePosition() {
        if(shape.i>num_of_rows)
            console.log("fuck1 " + shape.i);
        if(shape.j>num_of_cols)
            console.log("fuck2 " + shape.j);
        if(shape.j<0)
            console.log("fuck3 " + shape.j);
        if(shape.i<0)
            console.log("fuck4 " + shape.i);
        try{
            board[shape.i][shape.j] = 0;
        }
        catch(error)
        {
            console.log("fuck5 " + shape.i+" "+shape.j);
            board[shape.i][shape.j] = 0;
          
        }
        var x = GetKeyPressed();
        //Up
        if (x === 1) {
            if (shape.j > 0 && board[shape.i][shape.j - 1] !== 4) {
                shape.j--;
                
            }
        }
        //Down
        if (x === 2) {
            if (shape.j < 9 && board[shape.i][shape.j + 1] !== 4) {
                shape.j++;
            }
        }
        //Left
        if (x === 3) {
            if (shape.i > 0 && board[shape.i - 1][shape.j] !== 4) {
                shape.i--;
            }
        }
        //Right
        if (x === 4) {
            if (shape.i < 9 && board[shape.i + 1][shape.j] !== 4) {
                shape.i++;
            }
        }
        
        //Updating the score
        score = score + GetScore(board[shape.i][shape.j]);

        //Normal update
        if(board[shape.i][shape.j] !=3 && fifty_pointer_is_alive)
        {
            
            board[shape.i][shape.j] = 2;
            UpdateFifftyPointerPosition();
        }
        //Packman eats fifty pointer
        else
        {
            
            board[shape.i][shape.j] = 2;
            if(fifty_pointer_is_alive)
                score = score + GetScore(previous_kind_fifty_pointer);//Gets the points from the previous kind
            fifty_pointer_is_alive = false;
        }

        var currentTime = new Date();
        time_elapsed = (currentTime - start_time) / 1000;
        if (score >= 20 && time_elapsed <= 10) {
            pac_color = "green";
        }
//        if (score >= 50) {
    if (score >= 500) {
            window.clearInterval(interval);
            window.alert("Game completed");
        }
    else{
            if(time_elapsed>=time_limit)
            {
//                lblTime.value = 0;
                window.clearInterval(interval);
                window.alert("Game completed");
            }
            else
            {
                Draw();
            }
            
        }
    }


    //This function will return true if the fiftypointe is allowed to step on the given kind
    function IsAllowedToFiftyPointer(kind)
    {
        return kind!=2 && kind!=4 ;
    }

    //This function will update the position of the fifty pointer
    function UpdateFifftyPointerPosition() {
        board[fifty_pointer_loc.i][fifty_pointer_loc.j] = previous_kind_fifty_pointer;

        var directionAllowed =[false,false,false,false];
        var count = 0;

        //Up
        if (fifty_pointer_loc.j > 0 && IsAllowedToFiftyPointer(board[fifty_pointer_loc.i][fifty_pointer_loc.j - 1])) {
            directionAllowed[0] = true;
            count++;
        }
        
        //Down
        if (fifty_pointer_loc.j < 9 && IsAllowedToFiftyPointer(board[fifty_pointer_loc.i][fifty_pointer_loc.j + 1])) {
            directionAllowed[1] = true;
            count++;
        }
        
        //Left
        if (fifty_pointer_loc.i > 0 && IsAllowedToFiftyPointer(board[fifty_pointer_loc.i - 1][fifty_pointer_loc.j])) {
            directionAllowed[2] = true;
            count++;
        }
        
        //Right
        if (fifty_pointer_loc.i < 9 &&IsAllowedToFiftyPointer(board[fifty_pointer_loc.i + 1][fifty_pointer_loc.j])) {
            directionAllowed[3] = true;
            count++;
        }
        
        //Selecting random direction
        var randomNum = Math.random();
        var index = Math.floor(randomNum*count) + 1;
        var dir =0;
        for(i=0;i<index && i<directionAllowed.length;i++)
        {
            if(directionAllowed[i])
                dir = i+1;
            else
            {
                index++;
            }
        }

        //Updating the location
        var x = -1;
        var y = -1;
        if(dir==1)
        {
            fifty_pointer_loc.j--;
        }
        else
        {
            if(dir==2)
            {
                fifty_pointer_loc.j++;
            }
            else
            {
                    if(dir==3)
                    {
                        fifty_pointer_loc.i--;
                    }
                    else
                    {
                        if(dir==4)
                        {                     
                            fifty_pointer_loc.i++;           
                        }
                    }
            
            }
        }    
        previous_kind_fifty_pointer = board[fifty_pointer_loc.i][fifty_pointer_loc.j];
        board[fifty_pointer_loc.i][fifty_pointer_loc.j] = 3;

    }

    function updatePositionRandom(location)
    {

    }
</script>
</body>

</html>

